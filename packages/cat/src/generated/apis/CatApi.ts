/* tslint:disable */
/* eslint-disable */
/**
 * cat
 * 猫ドメインに関する API 定義
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Image,
  ImagesRequest,
  PostImagesResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ImageFromJSON,
    ImageToJSON,
    ImagesRequestFromJSON,
    ImagesRequestToJSON,
    PostImagesResponseFromJSON,
    PostImagesResponseToJSON,
} from '../models';

export interface DeleteImagesIdRequest {
    imagesId: number;
}

export interface GetImagesIdRequest {
    imagesId: number;
}

export interface PatchImagesIdRequest {
    imagesId: number;
    imagesRequest?: ImagesRequest;
}

export interface PostImagesRequest {
    imagesRequest?: ImagesRequest;
}

/**
 * CatApi - interface
 * 
 * @export
 * @interface CatApiInterface
 */
export interface CatApiInterface {
    /**
     * 特定の猫の画像を削除する
     * @summary DELETE /cat/images/:id
     * @param {number} imagesId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatApiInterface
     */
    deleteImagesIdRaw(requestParameters: DeleteImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 特定の猫の画像を削除する
     * DELETE /cat/images/:id
     */
    deleteImagesId(requestParameters: DeleteImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 猫の画像の一覧を取得する
     * @summary GET /cat/images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatApiInterface
     */
    getImagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Image>>>;

    /**
     * 猫の画像の一覧を取得する
     * GET /cat/images
     */
    getImages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Image>>;

    /**
     * 特定の猫の画像を取得する
     * @summary GET /cat/images/:id
     * @param {number} imagesId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatApiInterface
     */
    getImagesIdRaw(requestParameters: GetImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Image>>;

    /**
     * 特定の猫の画像を取得する
     * GET /cat/images/:id
     */
    getImagesId(requestParameters: GetImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Image>;

    /**
     * 特定の猫の画像を更新する
     * @summary PATCH /cat/images/:id
     * @param {number} imagesId 
     * @param {ImagesRequest} [imagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatApiInterface
     */
    patchImagesIdRaw(requestParameters: PatchImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 特定の猫の画像を更新する
     * PATCH /cat/images/:id
     */
    patchImagesId(requestParameters: PatchImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 猫の画像を1つ登録する ※ 画像解析した結果猫の画像じゃなかった場合は登録できない
     * @summary POST /cat/images
     * @param {ImagesRequest} [imagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatApiInterface
     */
    postImagesRaw(requestParameters: PostImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostImagesResponse>>;

    /**
     * 猫の画像を1つ登録する ※ 画像解析した結果猫の画像じゃなかった場合は登録できない
     * POST /cat/images
     */
    postImages(requestParameters: PostImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostImagesResponse>;

}

/**
 * 
 */
export class CatApi extends runtime.BaseAPI implements CatApiInterface {

    /**
     * 特定の猫の画像を削除する
     * DELETE /cat/images/:id
     */
    async deleteImagesIdRaw(requestParameters: DeleteImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.imagesId === null || requestParameters.imagesId === undefined) {
            throw new runtime.RequiredError('imagesId','Required parameter requestParameters.imagesId was null or undefined when calling deleteImagesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cat/images/{imagesId}`.replace(`{${"imagesId"}}`, encodeURIComponent(String(requestParameters.imagesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 特定の猫の画像を削除する
     * DELETE /cat/images/:id
     */
    async deleteImagesId(requestParameters: DeleteImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImagesIdRaw(requestParameters, initOverrides);
    }

    /**
     * 猫の画像の一覧を取得する
     * GET /cat/images
     */
    async getImagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Image>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cat/images`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageFromJSON));
    }

    /**
     * 猫の画像の一覧を取得する
     * GET /cat/images
     */
    async getImages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Image>> {
        const response = await this.getImagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 特定の猫の画像を取得する
     * GET /cat/images/:id
     */
    async getImagesIdRaw(requestParameters: GetImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Image>> {
        if (requestParameters.imagesId === null || requestParameters.imagesId === undefined) {
            throw new runtime.RequiredError('imagesId','Required parameter requestParameters.imagesId was null or undefined when calling getImagesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cat/images/{imagesId}`.replace(`{${"imagesId"}}`, encodeURIComponent(String(requestParameters.imagesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFromJSON(jsonValue));
    }

    /**
     * 特定の猫の画像を取得する
     * GET /cat/images/:id
     */
    async getImagesId(requestParameters: GetImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Image> {
        const response = await this.getImagesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 特定の猫の画像を更新する
     * PATCH /cat/images/:id
     */
    async patchImagesIdRaw(requestParameters: PatchImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.imagesId === null || requestParameters.imagesId === undefined) {
            throw new runtime.RequiredError('imagesId','Required parameter requestParameters.imagesId was null or undefined when calling patchImagesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cat/images/{imagesId}`.replace(`{${"imagesId"}}`, encodeURIComponent(String(requestParameters.imagesId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ImagesRequestToJSON(requestParameters.imagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 特定の猫の画像を更新する
     * PATCH /cat/images/:id
     */
    async patchImagesId(requestParameters: PatchImagesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchImagesIdRaw(requestParameters, initOverrides);
    }

    /**
     * 猫の画像を1つ登録する ※ 画像解析した結果猫の画像じゃなかった場合は登録できない
     * POST /cat/images
     */
    async postImagesRaw(requestParameters: PostImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostImagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cat/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImagesRequestToJSON(requestParameters.imagesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostImagesResponseFromJSON(jsonValue));
    }

    /**
     * 猫の画像を1つ登録する ※ 画像解析した結果猫の画像じゃなかった場合は登録できない
     * POST /cat/images
     */
    async postImages(requestParameters: PostImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostImagesResponse> {
        const response = await this.postImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
